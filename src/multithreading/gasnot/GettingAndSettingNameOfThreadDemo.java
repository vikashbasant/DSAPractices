package multithreading.gasnot;

/**
 * We can get current executing Thread object reference by using <code>Thread.currentThread()</code> method.
 */
class MyThread extends Thread {
    /**
     * If this thread was constructed using a separate
     * <code>Runnable</code> run object, then that
     * <code>Runnable</code> object's <code>run</code> method is called;
     * otherwise, this method does nothing and returns.
     * <p>
     * Subclasses of <code>Thread</code> should override this method.
     *
     * @see #start()
     */
    @Override
    public void run() {
        System.out.println("Child Thread!");
    }
}

public class GettingAndSettingNameOfThreadDemo {
    public static void main(String[] args) {

        // We can get current executing Thread object reference by using "Thread.currentThread()" method.
        // Once you have a Thread Object, then simply know the Name of the Thread via ".getName()"
        System.out.println(Thread.currentThread().getName()); // main

        // Create New Thread Object:
        MyThread myThread = new MyThread();

        // Default Name generated by JVM: "Thread-0"
        // getName() of the thread:
        System.out.println(myThread.getName()); // Thread-0

        // Set the name of the Thread:
        myThread.setName("Child Thread!");

        // Get the name of the Thread:
        System.out.println(myThread.getName()); // "Child Thread!"

        // setName() of the thread:
        Thread.currentThread().setName("Vikas");

        System.out.println(Thread.currentThread().getName()); // "Vikas"


        System.out.println(10 / 0);
        /*
        Exception in thread "Vikas" java.lang.ArithmeticException: / by zero
	    at multitreading.gasnot.GettingAndSettingNameOfThreadDemo.main(GettingAndSettingNameOfThreadDemo.java:47)
         */

    }
}
